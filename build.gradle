/**
 * https://github.com/wangfei1975/superlog
 * Build file using win64 libraries.
 * 
 * TODO allow the project to be built for mac64.
 */
import org.apache.tools.ant.taskdefs.condition.Os
apply plugin: "java"
apply plugin: 'gradle-one-jar'
apply from: 'genbuildinfo.gradle'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.rholder:gradle-one-jar:1.0.4'
    }
}
repositories {
	mavenCentral()
}
defaultTasks = ["clean", "deploy", "docs"]
version = "1.0.9"

def WORKSPACE_DIR = "../"
def MAIN_CLASS_NAME = "feiw.Slogmain"
def DEPLOY_DIR = "./"

sourceSets.main.java.srcDirs = ["./build/generated-sources", "./src"]
sourceSets.main.resources.includes = ["./resources", "./screenshots"] // latter location probably not important
dependencies {
	compile 'com.google.code.gson:gson:2.2.+'
	def dirName
	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		if (Os.isArch('i386')) {
			dirName = 'win32'
		} else if (Os.isArch('x86_64')) {
			dirName = 'win64'
		}
	} else if (Os.isFamily(Os.FAMILY_MAC)) {
		if (Os.isArch('i386')) {
			dirName = 'mac32'
		} else if (Os.isArch('x86_64')) {
			dirName = 'mac64'
		}
	} else if (Os.isFamily(Os.FAMILY_UNIX)) {
		if (Os.isArch('i386')) {
			dirName = 'linux32'
		} else if (Os.isArch('x86_64')) {
			dirName = 'linux64'
		}
	}
	compile fileTree(dir: "./lib/"+dirName, include: "*.jar")
}

task('showCache') << {
   configurations.compile.each { println it }
}

//tasks.genBuildInfo.dependsOn generateProto
tasks.compileJava.dependsOn genBuildInfo
 /*
tasks.each {
  if (!it.name.equals('showCache')) {
    it.dependsOn showCache
  }
}
*/

task myjar(type: OneJar) {
   mainClass = "$MAIN_CLASS_NAME"
   mergeManifestFromJar = true
   additionalDir = file('resources')
//   archiveName = "superlog-" + "$version" + ".jar"
}
// http://stackoverflow.com/questions/21721119/creating-runnable-jar-with-gradle
jar {
	manifest {
		attributes 'Timestamp': String.valueOf(System.currentTimeMillis())
		attributes 'Implementation-Title': 'github.com/wangfei1975/superlog',
			   'Implementation-Version': version
	}
	doFirst {
		println("Creating JAR file: " + myjar.archivePath);
	}
}
tasks.myjar.doLast() {
    println 'Done'
}
task deploy(dependsOn: myjar) << {
	println("Deploying Jar to location: " + removeLastChar(new File(DEPLOY_DIR).getAbsolutePath()) + myjar.archiveName);
	
	copy {
		from myjar.archivePath
		into DEPLOY_DIR
	}
}

task docs() << {
	println()
	println("==================================================================")
	println("To execute: ")
	println("cd " + removeLastChar(new File(DEPLOY_DIR).getAbsolutePath()))
	println("java -jar " + myjar.archiveName);
	println("==================================================================")
}

def removeLastChar(String specifiedString) {
	if (specifiedString == null)
		throw new GradleException("Specified String is NULL!");
	if (specifiedString.length() == 0)
		throw new GradleException("Specified String is empty!");
	return specifiedString.substring(0, specifiedString.length()-1);
}
